// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String
}
model User {
  id       String @id @default(cuid())
  email    String @unique
  username String @unique
  name     String?
  rating   Int    @default(1200)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password    Password?
  notes       Note[]
  roles       Role[]     @relation("RoleToUser")
  connections Connection[]
  sessions    Session[]
  image       UserImage?
  problemProgressions ProblemProgression[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String
  images  NoteImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId      String
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @unique
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]       @relation("RoleToUser")
  permissions Permission[] @relation("PermissionToRole")
}

model Permission {
  id          String @id @default(cuid())
  action      String
  entity      String
  access      String
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[] @relation("PermissionToRole")
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  type      String
  target    String
  secret    String
  algorithm String
  digits    Int
  period    Int
  charSet   String
  expiresAt DateTime?

  @@unique([target, type])
}

model Problem {
  id          String   @id @default(cuid())
  type        String   // 'FILL_IN' or 'SCENARIO'
  difficulty  String   // 'EASY', 'MEDIUM', or 'HARD'
  language    String   // 'JAVASCRIPT', 'PYTHON', or 'TYPESCRIPT'
  title       String
  description String
  source      String   // 'SEEDED' or 'GPT'
  
  // Learning metrics
  baseComplexity    Float    @default(1.0)  // Initial complexity score
  adaptiveDifficulty Float   @default(1.0)  // Adjusted based on user performance
  successRate       Float    @default(0.0)  // % of successful attempts
  averageTime       Float    @default(0.0)  // Average completion time
  
  // Usage tracking
  lastUsed     DateTime?
  dailyUseCount Int      @default(0)  // Track daily usage
  totalUses     Int      @default(0)  // Total times problem has been used
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Common fields
  hints       String   // Stored as JSON string
  tags        String   // Stored as JSON string
  timeLimit   Int      @default(300) // Time limit in seconds

  // Fields for FILL_IN type
  template        String?  // Code with markers for fill-in sections
  fillInSections  String?  // JSON string of {id, start, end, solution}[]

  // Fields for SCENARIO type
  startingCode   String?
  solution       String?
  testCases      String?  // JSON string of test cases

  // Relations
  progressions     ProblemProgression[]
}

model ProblemProgression {
  id               String   @id @default(cuid())
  attempts         Int      @default(0)     // Number of attempts
  solved           Boolean  @default(false)  // Whether problem was solved
  lastAttempt      DateTime @default(now()) // Last attempt timestamp
  
  // Learning metrics
  easeFactor       Float    @default(2.5)   // SM-2 inspired learning rate
  interval         Int      @default(0)     // Days between reviews
  consecutiveCorrect Int    @default(0)     // Streak of correct solutions
  timeSpent        Float    @default(0.0)   // Total time spent on problem
  
  // RL state
  stateVector      String?  // JSON string of current state
  actionValue      Float    @default(0.0)   // Q-value for current state
  rewardSignal     Float    @default(0.0)   // Last reward received
  
  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, problemId])
}
