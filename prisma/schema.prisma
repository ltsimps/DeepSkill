// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  extensions = [vector]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  name          String?
  image         Image?    @relation(fields: [imageId], references: [id])
  imageId       String?   @unique
  rating        Int       @default(1000)
  xp            Int       @default(0)
  level         Int       @default(1)
  streak        Int       @default(0)
  lastPractice  DateTime?
  preferredLanguage String @default("javascript")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  progressions  ProblemProgression[]
  sessions      PracticeSession[]
  achievements  UserAchievement[]
  password      Password?
  notes         Note[]
  roles         Role[]     @relation("RoleToUser")
  connections   Connection[]
  session       Session?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Problem {
  id            String    @id @default(cuid())
  title         String
  difficulty    String    @default("EASY")
  type          String    @default("SCENARIO")
  language      String    @default("JAVASCRIPT")
  description   String    @default("")
  problem       String    @default("")
  startingCode  String    @default("")
  solution      String    @default("")
  testCases     String    @default("[]")
  hints         String    @default("[]")
  tags          String    @default("[]")
  timeLimit     Int       @default(300)
  baseComplexity Float    @default(1.0)
  source        String    @default("USER")
  status        String    @default("ACTIVE")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  embedding     Unsupported("vector(1536)")?
  
  progressions ProblemProgression[]
  sessions    SessionProblem[]
}

model ProblemProgression {
  id               String   @id @default(cuid())
  userId           String
  problemId        String
  attempts         Int      @default(0)
  timeSpent        Int      @default(0)
  solved           Boolean?
  consecutiveCorrect Int    @default(0)
  lastSolution     String?
  lastFeedback     String?
  lastAttempt      DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem          Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  sessionProblems  SessionProblem[]

  @@unique([userId, problemId])
  @@index([userId])
  @@index([problemId])
}

model PracticeSession {
  id        String    @id @default(cuid())
  userId    String
  status    String    @default("ACTIVE") // ACTIVE, COMPLETED, EXPIRED
  problems  SessionProblem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SessionProblem {
  id        String    @id @default(cuid())
  sessionId String
  problemId String
  order     Int
  status    String    @default("PENDING") // PENDING, COMPLETED, FAILED
  attempts  Int       @default(0)
  session   PracticeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  problem   Problem   @relation(fields: [problemId], references: [id], onDelete: Cascade)
  progression ProblemProgression? @relation(fields: [problemId, userId], references: [problemId, userId])
  userId    String

  @@unique([sessionId, problemId])
  @@index([sessionId])
  @@index([problemId])
  @@index([problemId, userId])
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  type        String
  threshold   Int
  xpReward    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Image {
  id          String    @id @default(cuid())
  contentType String
  altText     String?
  blob        Bytes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User?
  note        Note?     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId      String?
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model Role {
  id          String        @id @default(cuid())
  name        String        @unique
  users       User[]        @relation("RoleToUser")
  permissions Permission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id        String   @id @default(cuid())
  entity    String   // The entity this permission is for (e.g. "note", "user")
  action    String   // The action allowed (e.g. "create", "read", "update", "delete")
  access    String   // The access level (e.g. "own", "any")
  roles     Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([entity, action, access])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Session {
  id             String    @id @default(cuid())
  expirationDate DateTime
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Verification {
  id        String   @id @default(cuid())
  type      String
  target    String
  secret    String
  algorithm String
  digits    Int
  period    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([target, type])
  @@index([type, target])
}
